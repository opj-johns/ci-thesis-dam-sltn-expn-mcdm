%% Dam selection :: Multi-Choice Goal Programming (MCGP) WGP

% === Decision variables ===
xb = optimvar("xb",28,"LowerBound",0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound",0);
p  = optimvar("p",10,"LowerBound",0);

% Binary vars for choices: 5 goals × 3 choices each
z = optimvar("z_pop",5,"LowerBound",0,"UpperBound",1,"Type","integer");


% === Problem definition ===
prob = optimproblem;

% === Objective Function (Weighted sum of deviations) ===
prob.Objective = (1/47)*n(1) + (1/3)*n(2) + (1/0.04)*p(3) + (1/48.74)*p(4) + ...
                 (1/0.52)*n(5) + (1/22.07)*n(6) + (1/0.35)*p(7) + ...
                 (1/0.32)*p(8) + (1/0.23)*p(9) + (1/0.68)*n(10);


% --- Original constraints (with fixed targets) replaced with multi-choice form ---
% Example: Population goal

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...    
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;


% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) +  ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));


% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;

% === Solve ===
problem = prob2struct(prob);
[sol,fval,exitflag,output] = intlinprog(problem);

disp(sol)
disp(fval)
%% Dam selection :: Multi-Choice Goal Programming (MCGP) CGP

% === Decision variables ===
% binary variable {0,1}
xb = optimvar("xb",28,"LowerBound",0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound",0);
p  = optimvar("p",10,"LowerBound",0);
D  = optimvar("D",1,"LowerBound",0);

% Binary vars for choices: 5 goals × 3 choices each
z = optimvar("z",5,"LowerBound",0,"UpperBound",1,"Type","integer");



% === Problem definition ===
prob = optimproblem;

% === Objective Function ===
prob.Objective = D(1);

% === Constraints ===

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;

% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));


% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;

% D constraints
prob.Constraints.cons13 = (1/47)*n(1)      <= D(1);
prob.Constraints.cons14 = (1/3)*n(2)       <= D(1);
prob.Constraints.cons15 = (1/0.04)*p(3)    <= D(1);
prob.Constraints.cons16 = (1/0.04)*p(4)    <= D(1);
prob.Constraints.cons17 = (1/48.74)*n(5)   <= D(1);
prob.Constraints.cons18 = (1/0.52)*n(6)    <= D(1);
prob.Constraints.cons19 = (1/22.07)*p(7)   <= D(1);
prob.Constraints.cons20 = (1/0.32)*p(8)    <= D(1);
prob.Constraints.cons21 = (1/0.23)*p(9)    <= D(1);
prob.Constraints.cons22 = (1/0.68)*n(10)   <= D(1);


% === Convert to solver-based form ===
problem = prob2struct(prob);

% === Solve using intlinprog ===
[sol,fval,exitflag,output] = intlinprog(problem);

disp(sol)
disp(fval)

%% Dam selection :: Multi-Choice Goal Programming (MCGP) EGP

% === Decision variables ===
% binary variable {0,1}
xb = optimvar("xb",28,"LowerBound",0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound",0);
p  = optimvar("p",10,"LowerBound",0);
D  = optimvar("D",1,"LowerBound",0);

% binary variable {0,1}
z = optimvar("z",5,"LowerBound",0,"UpperBound",1,"Type","integer");



% === Problem definition ===
prob = optimproblem;


% === Objective Function ===
alpha = 0.8;
prob.Objective = alpha * D(1) + (1-alpha) * ((1/47)*n(1) + (1/3)*n(2) + (1/0.04)*p(3) + (1/48.74)*p(4) + (1/0.52)*n(5) + ...
                    (1/22.07)*n(6) + (1/0.35)*p(7) + (1/0.32)*p(8) + (1/23)*p(9) + (1/0.68)*n(10));

% === Constraints ===

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;

% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) == 0.52;


% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));


% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;

% D constraints
prob.Constraints.cons13 = (1/47)*n(1)      <= D(1);
prob.Constraints.cons14 = (1/3)*n(2)       <= D(1);
prob.Constraints.cons15 = (1/0.04)*p(3)    <= D(1);
prob.Constraints.cons16 = (1/0.04)*p(4)    <= D(1);
prob.Constraints.cons17 = (1/48.74)*n(5)   <= D(1);
prob.Constraints.cons18 = (1/0.52)*n(6)    <= D(1);
prob.Constraints.cons19 = (1/22.07)*p(7)   <= D(1);
prob.Constraints.cons20 = (1/0.32)*p(8)    <= D(1);
prob.Constraints.cons21 = (1/0.23)*p(9)    <= D(1);
prob.Constraints.cons22 = (1/0.68)*n(10)   <= D(1);


% === Convert to solver-based form ===  
problem = prob2struct(prob);

% === Solve using intlinprog ===
[sol,fval,exitflag,output] = intlinprog(problem);


disp(sol)
disp(fval)


%% Dam selection :: Multi-Choice Goal Programming (MCGP) LGP

% Priority 1
% === Decision variables ===
xb = optimvar("xb",28,"LowerBound", 0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound", 0);
p  = optimvar("p",10,"LowerBound", 0);

% Binary vars for choices: 5 goals × 3 choices each
z = optimvar("z_pop",5,"LowerBound",0,"UpperBound",1,"Type","integer");

% === Problem definition ===
prob = optimproblem;

% === Objective Function (Weighted sum of deviations) ===
prob.Objective = (1/47)*n(1) + (1/3)*n(2) + (1/0.52)*n(5) + (1/0.68)*n(10);


% --- Original constraints (with fixed targets) replaced with multi-choice form ---
% Example: Population goal

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...    
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;


% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));


% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;


% === Solve ===
problem = prob2struct(prob);
[sol,fval,exitflag,output] = intlinprog(problem);

priority_1_sol = sol;
priority_1_fval = fval;

% Priority 2
% === Decision variables ===
xb = optimvar("xb",28,"LowerBound", 0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound", 0);
p  = optimvar("p",10,"LowerBound", 0);

% Binary vars for choices: 5 goals × 3 choices each
z = optimvar("z_pop",5,"LowerBound",0,"UpperBound",1,"Type","integer");

% === Problem definition ===
prob = optimproblem;

% === Objective Function (Weighted sum of deviations) ===
prob.Objective = (1/0.04)*p(3) + (1/48.74)*p(4) + (1/22.07)*n(6);


% --- Original constraints (with fixed targets) replaced with multi-choice form ---
% Example: Population goal

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...    
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;


% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));


% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;

% === Priority one objective constraint ===
prob.Constraints.cons13 = (1/47)*n(1) + (1/3)*n(2) + (1/0.52)*n(5) + (1/0.68)*n(10) == priority_1_fval;

% === Solve ===
problem = prob2struct(prob);
[sol,fval,exitflag,output] = intlinprog(problem);

priority_2_sol = sol;
priority_2_fval = fval;


% Priority 3
% === Decision variables ===
xb = optimvar("xb",28,"LowerBound", 0,"UpperBound",1,"Type","integer");
n  = optimvar("n",10,"LowerBound", 0);
p  = optimvar("p",10,"LowerBound", 0);

% Binary vars for choices: 5 goals × 3 choices each
z = optimvar("z_pop",5,"LowerBound",0,"UpperBound",1,"Type","integer");

% === Problem definition === 
prob = optimproblem;

% === Objective Function (Weighted sum of deviations) ===
prob.Objective = (1/0.35)*p(7) + (1/0.32)*p(8) + (1/23)*p(9);


% --- Original constraints (with fixed targets) replaced with multi-choice form ---
% Example: Population goal

% Dam height
prob.Constraints.cons1 = ...
    29.00*xb(1) + 33.00*xb(2) + 71.00*xb(3) + 50.00*xb(4) + 40.00*xb(5) + 46.00*xb(6) + ...
    18.00*xb(7) + 64.00*xb(8) + 100.00*xb(9) + 85.00*xb(10) + 20.00*xb(11) + 20.00*xb(12) + ...
    26.00*xb(13) + 17.00*xb(14) + 15.00*xb(15) + 15.00*xb(16) + 45.00*xb(17) + 29.00*xb(18) + ...
    57.00*xb(19) + 55.00*xb(20) + 40.00*xb(21) + 36.00*xb(22) + 17.00*xb(23) + 55.00*xb(24) + ...
    70.00*xb(25) + 94.00*xb(26) + 79.00*xb(27) + 26.00*xb(28) + n(1) - p(1) == 47;

% Dam capacity
prob.Constraints.cons2 = ...
    2.00*xb(1) + 18.00*xb(2) + 96.00*xb(3) + 83.00*xb(4) + 9.50*xb(5) + 13.00*xb(6) + ...
    2.00*xb(7) + 725.00*xb(8) + 197.00*xb(9) + 369.00*xb(10) + 2.70*xb(11) + 1.00*xb(12) + ...
    1.30*xb(13) + 1.00*xb(14) + 1.10*xb(15) + 2.30*xb(16) + 43.00*xb(17) + 1.00*xb(18) + ...
    6.50*xb(19) + 62.00*xb(20) + 1.00*xb(21) + 12.00*xb(22) + 2.00*xb(23) + 55.50*xb(24) + ...
    592.00*xb(25) + 216.00*xb(26) + 110.00*xb(27) + 3.00*xb(28) + n(2) - p(2) == 3;

% Reservoir area
prob.Constraints.cons3 = ...
    0.08*xb(1) + 0.24*xb(2) + 0.60*xb(3) + 0.88*xb(4) + 0.26*xb(5) + 0.07*xb(6) + ...
    0.08*xb(7) + 20.00*xb(8) + 0.50*xb(9) + 1.90*xb(10) + 0.08*xb(11) + 0.29*xb(12) + ...
    0.02*xb(13) + 0.03*xb(14) + 0.03*xb(15) + 0.07*xb(16) + 0.33*xb(17) + 0.02*xb(18) + ...
    0.02*xb(19) + 0.43*xb(20) + 0.01*xb(21) + 0.31*xb(22) + 0.05*xb(23) + 0.34*xb(24) + ...
    4.76*xb(25) + 0.75*xb(26) + 0.51*xb(27) + 0.01*xb(28) + n(3) - p(3) == 0.04;

% Temperature
prob.Constraints.cons4 = ...    
    18.94*xb(1) + 18.75*xb(2) + 19.06*xb(3) + 19.10*xb(4) + 18.94*xb(5) + 18.00*xb(6) + ...
    18.78*xb(7) + 18.98*xb(8) + 16.30*xb(9) + 17.50*xb(10) + 16.38*xb(11) + 21.37*xb(12) + ...
    18.98*xb(13) + 18.42*xb(14) + 18.00*xb(15) + 18.00*xb(16) + 18.00*xb(17) + 19.29*xb(18) + ...
    16.26*xb(19) + 16.92*xb(20) + 18.95*xb(21) + 14.70*xb(22) + 18.54*xb(23) + 16.92*xb(24) + ...
    16.67*xb(25) + 21.27*xb(26) + 17.40*xb(27) + 15.56*xb(28) + n(4) - p(4) == 48.74;


% Population: normalized between 0 and 50.
prob.Constraints.cons5 = ...
    0.24*xb(1) + 0.38*xb(2) + 0.24*xb(3) + 21.80*xb(4) + 0.28*xb(5) + ...
    0.23*xb(6) + 0.13*xb(7) + 0.14*xb(8) + 0.51*xb(9) + 0.57*xb(10) + ...
    0.00*xb(11) + 0.66*xb(12) + 0.20*xb(13) + 0.19*xb(14) + 50.00*xb(15) + ...
    50.00*xb(16) + 5.12*xb(17) + 0.40*xb(18) + 0.45*xb(19) + 1.27*xb(20) + ...
    0.31*xb(21) + 0.23*xb(22) + 0.83*xb(23) + 0.21*xb(24) + 1.53*xb(25) + ...
    0.19*xb(26) + 0.68*xb(27) + 0.37*xb(28) + n(5) - p(5) ...
    == 0.52*z(1) + 0.57*(1-z(1));

% Rainfall
prob.Constraints.cons6 = ...
    15.98*xb(1) + 17.45*xb(2) + 10.80*xb(3) + 13.32*xb(4) + 15.98*xb(5) + 19.57*xb(6) + ...
    12.29*xb(7) + 17.02*xb(8) + 10.47*xb(9) + 12.15*xb(10) + 11.52*xb(11) + 3.73*xb(12) + ...
    17.19*xb(13) + 19.19*xb(14) + 19.57*xb(15) + 19.57*xb(16) + 19.57*xb(17) + 30.36*xb(18) + ...
    22.99*xb(19) + 33.23*xb(20) + 25.07*xb(21) + 25.41*xb(22) + 16.42*xb(23) + 33.23*xb(24) + ...
    7.88*xb(25) + 9.31*xb(26) + 8.07*xb(27) + 7.54*xb(28) + n(6) - p(6) == 22.07;

% Residence goal
prob.Constraints.cons7 = ...
    3.52*xb(1) + 11.65*xb(2) + 0.70*xb(3) + 3.58*xb(4) + 4.08*xb(5) + 2.97*xb(6) + 2.50*xb(7) +...
    15.76*xb(8) + 3.20*xb(9) + 7.82*xb(10) + 28.64*xb(11) + 0.81*xb(12) + 3.91*xb(13) + ...
    2.60*xb(14) + 9.72*xb(15) + 6.61*xb(16) + 3.58*xb(17) + 0.35*xb(18) + 0.81*xb(19) + ...
    3.63*xb(20) + 13.91*xb(21) + 9.59*xb(22) + 2.53*xb(23) + 2.95*xb(24) + 14.84*xb(25) + ...
    25.23*xb(26) + 3.86*xb(27) + 11.30*xb(28) + n(7) - p(7) ...
    == 1.86*z(2) + 2.05*(1-z(2));


% Farmland distance goal
prob.Constraints.cons8 = ...
    0.10*xb(1) + 1.29*xb(2) + 0.11*xb(3) + 3.63*xb(4) + 1.69*xb(5) + 5.11*xb(6) + ...
    2.75*xb(7) + 2.90*xb(8) + 6.35*xb(9) + 0.16*xb(10) + 16.80*xb(11) + 0.90*xb(12) + ...
    0.33*xb(13) + 3.24*xb(14) + 0.11*xb(15) + 0.26*xb(16) + 0.35*xb(17) + 1.77*xb(18) + ...
    0.90*xb(19) + 2.47*xb(20) + 2.97*xb(21) + 8.20*xb(22) + 0.24*xb(23) + 5.47*xb(24) + ...
    8.13*xb(25) + 3.62*xb(26) + 0.58*xb(27) + 0.93*xb(28) + n(8) - p(8) ...
    == 0.32*z(3) + 0.35*(1-z(3));

% Nearest road goal
prob.Constraints.cons9 = ...
    0.01*xb(1) + 0.21*xb(2) + 0.25*xb(3) + 0.01*xb(4) + 0.11*xb(5) + 1.12*xb(6) + ...
    0.23*xb(7) + 0.02*xb(8) + 0.01*xb(9) + 2.82*xb(10) + 5.69*xb(11) + 0.86*xb(12) + ...
    0.83*xb(13) + 0.28*xb(14) + 0.83*xb(15) + 0.21*xb(16) + 4.98*xb(17) + 3.49*xb(18) + ...
    0.93*xb(19) + 1.80*xb(20) + 5.15*xb(21) + 0.55*xb(22) + 1.46*xb(23) + 2.31*xb(24) + ...
    0.29*xb(25) + 0.22*xb(26) + 1.26*xb(27) + 3.30*xb(28) + n(9) - p(9) ...
    == 0.23*z(4) + 0.25*(1-z(4));

% Farmland area goal
prob.Constraints.cons10 = ...
    226.95*xb(1) + 214.26*xb(2) + 6.02*xb(3) + 36.19*xb(4) + 60.24*xb(5) + 0.13*xb(6) + ...
    0.05*xb(7) + 23.57*xb(8) + 41.94*xb(9) + 21.81*xb(10) + 0.01*xb(11) + 12.05*xb(12) + ...
    16.21*xb(13) + 31.09*xb(14) + 36.08*xb(15) + 36.08*xb(16) + 12.80*xb(17) + 2.09*xb(18) + ...
    0.62*xb(19) + 15.55*xb(20) + 27.25*xb(21) + 8.79*xb(22) + 91.07*xb(23) + 0.01*xb(24) + ...
    21.96*xb(25) + 1.13*xb(26) + 33.78*xb(27) + 8.54*xb(28) + n(10) - p(10) ...
    == 0.68*z(5) + 0.75*(1-z(5));

% Selection (3 dams)
prob.Constraints.cons11 = ...
    xb(1) + xb(2) + xb(3) + xb(4) + xb(5) + xb(6) + xb(7) + xb(8) + xb(9) + xb(10) + ...
    xb(11) + xb(12) + xb(13) + xb(14) + xb(15) + xb(16) + xb(17) + xb(18) + xb(19) + xb(20) + ...
    xb(21) + xb(22) + xb(23) + xb(24) + xb(25) + xb(26) + xb(27) + xb(28) == 3;

% Budget: Estimated
prob.Constraints.cons12 = ...
    163.4*xb(1)  + 170.9*xb(2)  + 158.2*xb(3)  + 180.9*xb(4)  + 168.6*xb(5)  + ...
    174.8*xb(6)  + 167.3*xb(7)  + 192.5*xb(8)  + 191.2*xb(9)  + 180.3*xb(10) + ...
    193.8*xb(11) + 152.2*xb(12) + 156.8*xb(13) + 166.0*xb(14) + 153.2*xb(15) + ...
    154.8*xb(16) + 169.2*xb(17) + 157.5*xb(18) + 158.7*xb(19) + 166.5*xb(20) + ...
    164.3*xb(21) + 177.4*xb(22) + 165.3*xb(23) + 169.5*xb(24) + 186.7*xb(25) + ...
    191.9*xb(26) + 190.4*xb(27) + 172.1*xb(28) <= 500;

% === Priority one objective constraint ===
prob.Constraints.cons13 = (1/47)*n(1) + (1/3)*n(2) + (1/0.52)*n(5) + (1/0.68)*n(10) == priority_1_fval;

% === Priority one objective constraint ===
prob.Constraints.cons14 = (1/0.04)*p(3) + (1/48.74)*p(4) + (1/22.07)*n(6) == priority_2_fval;
% === Solve ===
problem = prob2struct(prob);
[sol,fval,exitflag,output] = intlinprog(problem);

priority_3_sol = sol;
priority_3_fval = fval;